#pragma once
/* Text wrapping is not recommended for this document 
 * 
 * Normal PRN generator. Must call normal_setup() to initialize the
 * uniform PRNG.
 *
 * normal() -> Standard normal PRN variate. 
 *
 * */
#include "vexmath/ziggurat/shared.hpp" /* Functions used both in exponential.h and here */
#include "vexmath/ziggurat/exponential.hpp"    /* Sampling from the tail uses exponential PRNs  */
#define __NORM_BINS__	253

namespace math {
namespace ziggurat {
    uint_fast8_t NormalPRNG::_norm_sample_A(void) {  /* Alias Sampling of A_i */
        static uint8_t map[256] = { 0, 0, 239, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 251, 251, 251, 251, 251, 251, 251, 250, 250, 250, 250, 250, 249, 249, 249, 248, 248, 248, 247, 247, 247, 246, 246, 245, 244, 244, 243, 242, 240, 2, 2, 3, 3, 0, 0, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 1, 0, 0 };
        static int32_t ipmf[256] = { 2147483647, 256170471, 1831585757, 1580630129, 2100799512, 1518622514, 1099674054, 782426366, 533103764, 331543597, 164929036, 24703910, -95072542, -198660353, -289197827, -369050453, -440036656, -503578432, -560804592, -612623181, -659773345, -702863160, -742397678, -778800034, -812427537, -843584094, -872529911, -899489135, -924655944, -948199432, -970267568, -990990416, -1010482790, -1028846440, -1046171872, -1062539872, -1078022785, -1092685597, -1106586855, -1119779447, -1132311276, -1144225834, -1155562704, -1166357989, -1176644688, -1186453022, -1195810723, -1204743284, -1213274179, -1221425062, -1229215935, -1236665307, -1243790324, -1250606897, -1257129805, -1263372796, -1269348672, -1275069370, -1280546029, -1285789057, -1290808187, -1295612530, -1300210619, -1304610458, -1308819556, -1312844963, -1316693305, -1320370814, -1323883350, -1327236431, -1330435255, -1333484717, -1336389434, -1339153759, -1341781796, -1344277421, -1346644288, -1348885848, -1351005358, -1353005892, -1354890351, -1356661475, -1358321847, -1359873906, -1361319949, -1362662144, -1363902533, -1365043036, -1366085462, -1367031510, -1367882773, -1368640748, -1369306834, -1369882339, -1370368483, -1370766402, -1371077148, -1371301697, -1371440948, -1371495725, -1371466781, -1371354801, -1371160401, -1370884131, -1370526478, -1370087867, -1369568658, -1368969154, -1368289599, -1367530176, -1366691012, -1365772179, -1364773689, -1363695502, -1362537521, -1361299594, -1359981515, -1358583020, -1357103796, -1355543469, -1353901613, -1352177748, -1350371334, -1348481778, -1346508429, -1344450577, -1342307455, -1340078237, -1337762034, -1335357899, -1332864819, -1330281718, -1327607455, -1324840821, -1321980538, -1319025258, -1315973558, -1312823943, -1309574839, -1306224592, -1302771466, -1299213642, -1295549209, -1291776169, -1287892425, -1283895786, -1279783956, -1275554535, -1271205011, -1266732759, -1262135032, -1257408961, -1252551542, -1247559640, -1242429975, -1237159117, -1231743480, -1226179317, -1220462707, -1214589550, -1208555555, -1202356235, -1195986892, -1189442608, -1182718235, -1175808377, -1168707384, -1161409331, -1153908009, -1146196901, -1138269171, -1130117641, -1121734774, -1113112650, -1104242941, -1095116889, -1085725278, -1076058403, -1066106040, -1055857411, -1045301148, -1034425252, -1023217048, -1011663144, -999749371, -987460737, -974781359, -961694401, -948182003, -934225199, -919803836, -904896476, -889480294, -873530968, -857022551, -839927336, -822215704, -803855957, -784814136, -765053811, -744535856, -723218196, -701055523, -677998983, -653995816, -628988965, -602916627, -575711747, -547301452, -517606404, -486540068, -454007872, -419906257, -384121581, -346528856, -306990298, -265353646, -221450201, -175092547, -126071875, -74154837, -19079825, 39447451, 101759240, 168232084, 239294474, 315436148, 397219467, 485293421, 580411032, 683451111, 795445750, 917615357, 1051413780, 1198587101, 1361251186, 1541995369, 1744023212, 1971346791, 1913162070, 1059540993, 1776036691, 1537865144, 1658023411, 578554296, 1671515590, 1645201417, 353087699, 50362652, 1465893215, 672721491, -631573511, 1527950832, 1857000128, -2147483647, -2147483647 };
        uint_fast8_t j = fast_prng.sl & 0xff;   /* j <- I(0, 256) */
        return fast_prng++.sl >= ipmf[j] ? map[j] : j;
    }

    inline float NormalPRNG::normal(void) {
        static float X[254] = { 1.6931475266786725786e-09, 1.5979402211657962989e-09, 1.538758985289456009e-09, 1.4949697216185248131e-09, 1.459866994064599059e-09, 1.4303863895750095282e-09, 1.4048597005759916961e-09, 1.3822741131672706675e-09, 1.3619667093197882283e-09, 1.3434789738459849251e-09, 1.3264800623108377759e-09, 1.3107231144233035951e-09, 1.2960188501430770633e-09, 1.2822188259286288282e-09, 1.2692043887699575699e-09, 1.2568791436930946917e-09, 1.2451636704048485346e-09, 1.2339917264635259831e-09, 1.2233074604521065145e-09, 1.2130633281388103786e-09, 1.2032185084459672795e-09, 1.193737681542864885e-09, 1.1845900737729704183e-09, 1.175748702209168141e-09, 1.1671897706233947468e-09, 1.1588921817445986757e-09, 1.1508371398518690128e-09, 1.1430078242791579904e-09, 1.1353891191223872349e-09, 1.1279673878881794424e-09, 1.120730284376441547e-09, 1.1136665930002230143e-09, 1.1067660931918756669e-09, 1.1000194436485369256e-09, 1.0934180830206672786e-09, 1.086954144308428131e-09, 1.0806203807484234602e-09, 1.0744101013818252145e-09, 1.0683171148194553961e-09, 1.0623356799789522429e-09, 1.0564604627780096243e-09, 1.0506864979367349941e-09, 1.0450091551797691445e-09, 1.0394241092413951325e-09, 1.0339273131694429032e-09, 1.0285149745002877666e-09, 1.0231835339407273673e-09, 1.0179296462454422636e-09, 1.0127501630230403953e-09, 1.0076421172409076984e-09, 1.0026027092304834596e-09, 9.976292940211571836e-10, 9.927193698535611134e-10, 9.878705677422750512e-10, 9.830806419744126708e-10, 9.783474614446687165e-10, 9.736690017395434848e-10, 9.690433378939303074e-10, 9.644686377523072311e-10, 9.599431558746272282e-10, 9.554652279338290239e-10, 9.51033265557841386e-10, 9.466457515741524143e-10, 9.423012356195673882e-10, 9.379983300817733387e-10, 9.33735706342841438e-10, 9.295120912978940063e-10, 9.2532626412489643773e-10, 9.2117705328395269756e-10, 9.1706333372662658783e-10, 9.1298402429771441164e-10, 9.0893808531358785936e-10, 9.049245163027347032e-10, 9.0094235389547153544e-10, 8.969906698510066886e-10, 8.930685692111094452e-10, 8.8917518857060832613e-10, 8.85309694455809418e-10, 8.814712818027065143e-10, 8.7765917252755808193e-10, 8.738726141830402931e-10, 8.701108786937581081e-10, 8.6637326116541428824e-10, 8.6265907876240510034e-10, 8.589676696490364922e-10, 8.552983919899402481e-10, 8.5165062300562009457e-10, 8.4802375807937651215e-10, 8.4441720991214929176e-10, 8.4083040772208148865e-10, 8.372627964858498839e-10, 8.3371383621902761715e-10, 8.301830012929463044e-10, 8.2666977978570949625e-10, 8.231736728651783716e-10, 8.1969419420190553467e-10, 8.162308694101349832e-10, 8.1278323551511689907e-10, 8.093508404451059253e-10, 8.059332425465219696e-10, 8.0253001012085416615e-10, 7.9914072098198218916e-10, 7.9576496203267534153e-10, 7.924023288591093525e-10, 7.890524253423141842e-10, 7.8571486328553386523e-10, 7.8238926205654191377e-10, 7.7907524824401369223e-10, 7.757724553271104389e-10, 7.724805233574790847e-10, 7.691990986529176094e-10, 7.659278335019978955e-10, 7.6266638587897706673e-10, 7.5941441916836438376e-10, 7.5617160189854412514e-10, 7.529376074838857061e-10, 7.497121139748007548e-10, 7.464948038152331381e-10, 7.432853636070921548e-10, 7.400834838811614236e-10, 7.36888858874036511e-10, 7.337011863106631758e-10, 7.30520167192065357e-10, 7.2734550558786778433e-10, 7.241769084332324295e-10, 7.210140853298410157e-10, 7.1785674835056752187e-10, 7.147046118474951212e-10, 7.115573922629413231e-10, 7.0841480794316330115e-10, 7.052765789544225039e-10, 7.021424269010937212e-10, 6.9901207474550881146e-10, 6.958852466292293329e-10, 6.927616676954453645e-10, 6.896410639121998645e-10, 6.8652316189613900326e-10, 6.8340768873648902235e-10, 6.80294371818959307e-10, 6.7718293864926950457e-10, 6.7407311667599566304e-10, 6.709646331124264795e-10, 6.678572147571158104e-10, 6.6475058781281157306e-10, 6.616444777034340193e-10, 6.585386088887680454e-10, 6.554327046765246614e-10, 6.5232648703141591723e-10, 6.4921967638087540904e-10, 6.4611199141704288284e-10, 6.4300314889461633326e-10, 6.3989286342415826136e-10, 6.3678084726042430583e-10, 6.336668100852621662e-10, 6.305504587846064733e-10, 6.274314972190708734e-10, 6.243096259876119185e-10, 6.21184542183710215e-10, 6.180559391434824716e-10, 6.1492350618510338126e-10, 6.1178692833887843064e-10, 6.0864588606726746786e-10, 6.0550005497411387966e-10, 6.023491055022851951e-10, 5.9919270261887746033e-10, 5.960305054870774161e-10, 5.9286216712371287866e-10, 5.8968733404145227234e-10, 5.8650564587453840887e-10, 5.833167349868587152e-10, 5.801202260610634687e-10, 5.769157356673444034e-10, 5.7370287181037741874e-10, 5.704812334528140488e-10, 5.672504100135757187e-10, 5.64009980839061374e-10, 5.607595146452213951e-10, 5.57498568928277227e-10, 5.5422668934167506187e-10, 5.5094340903665118997e-10, 5.4764824796355400034e-10, 5.443407121308104696e-10, 5.4102029281814039535e-10, 5.3768646574030627563e-10, 5.343386901573368011e-10, 5.3097640792677310484e-10, 5.2759904249305424434e-10, 5.2420599780867623897e-10, 5.2079665718122086055e-10, 5.173703820397488455e-10, 5.1392651061337869885e-10, 5.104643565141169203e-10, 5.0698320721515689785e-10, 5.034823224149086656e-10, 4.9996093227594487935e-10, 4.9641823552683188124e-10, 4.928533974134377884e-10, 4.892655474847478238e-10, 4.856537771964420776e-10, 4.820171373134690259e-10, 4.78354635090539916e-10, 4.7466523120682785264e-10, 4.7094783642812570896e-10, 4.672013079662329964e-10, 4.6342444550132500955e-10, 4.596159868284138968e-10, 4.5577460308362789228e-10, 4.5189889349977568839e-10, 4.4798737963336321177e-10, 4.4403849899668996453e-10, 4.4005059801862785291e-10, 4.360219242458785963e-10, 4.3195061768254937122e-10, 4.2783470114932690853e-10, 4.236720695238050509e-10, 4.1946047769992776305e-10, 4.1519752707616843717e-10, 4.1088065034786707887e-10, 4.065070943376819969e-10, 4.0207390054758612968e-10, 3.975778830539443445e-10, 3.9301560329096651145e-10, 3.8838334117336201303e-10, 3.8367706189123592518e-10, 3.7889237756243818451e-10, 3.740245027407362069e-10, 3.6906820254026496525e-10, 3.640177318313341377e-10, 3.5886676356736549612e-10, 3.536083037863273376e-10, 3.48234590148795403e-10, 3.4273696996657001003e-10, 3.371057524511436625e-10, 3.3133002823949991462e-10, 3.2539744694163697474e-10, 3.192939402066876667e-10, 3.1300337317133518278e-10, 3.0650710042638700642e-10, 2.9978339267501139944e-10, 2.9280668517969870763e-10, 2.8554657571618409597e-10, 2.7796646248812759826e-10, 2.7002165116994734467e-10, 2.6165665575884184353e-10, 2.5280123217151678938e-10, 2.4336433664080912696e-10, 2.332245137667828307e-10, 2.2221375570091028252e-10, 2.1008846162833437294e-10, 1.9647217047624471502e-10, 1.8072708097106417963e-10, 1.6160238252771065564e-10, 1.358437588981188376e-10, 0.0 };
        static float Y[254] = { 6.2699696974249007745e-13, 1.2913512143462199108e-12, 1.9812567672647767274e-12, 2.6913703924458827759e-12, 3.4185588095213248524e-12, 4.1607347532325463254e-12, 4.9163962389447956273e-12, 5.6844048115151294237e-12, 6.4638646626921947938e-12, 7.2540507312656953317e-12, 8.054363075731037378e-12, 8.864296429978479056e-12, 9.6834190595894001625e-12, 1.0511357588557473918e-11, 1.1347785809218892984e-11, 1.2192416236799399595e-11, 1.3044993607780159804e-11, 1.3905289787882545635e-11, 1.4773099723548414178e-11, 1.5648238179991012435e-11, 1.6530537081730515212e-11, 1.7419843321257477466e-11, 1.8316016936129399395e-11, 1.921892957941774302e-11, 2.0128463226193554884e-11, 2.1044509071766856806e-11, 2.196696658707711532e-11, 2.2895742703919552881e-11, 2.3830751108240967287e-11, 2.4771911624009141854e-11, 2.5719149673478981842e-11, 2.6672395802281829925e-11, 2.7631585259823762832e-11, 2.8596657627120669341e-11, 2.9567556485516862296e-11, 3.0544229120800808804e-11, 3.152662625810009843e-11, 3.251470182364920473e-11, 3.3508412730109716433e-11, 3.450771868260822682e-11, 3.551258200306131751e-11, 3.6522967470695300204e-11, 3.753884217695267903e-11, 3.856017539321731612e-11, 3.9586938449993766575e-11, 4.0619104626349444478e-11, 4.1656649048576256403e-11, 4.2699548597155223674e-11, 4.3747781821216791045e-11, 4.4801328859783770673e-11, 4.586017136916549417e-11, 4.6924292455942649068e-11, 4.7993676615044046483e-11, 4.9068309672470532466e-11, 5.0148178732268528717e-11, 5.123327212739720735e-11, 5.23235793741698608e-11, 5.3419091129982292984e-11, 5.4519799154069600833e-11, 5.562569627105802486e-11, 5.673677633710103614e-11, 5.785303420840885495e-11, 5.897446571199846646e-11, 6.0101067618507178395e-11, 6.1232837616927080657e-11, 6.236977429113061655e-11, 6.351187709806903001e-11, 6.465914634753586427e-11, 6.581158318339708283e-11, 6.6969189566197878995e-11, 6.813196825706393474e-11, 6.929992280282187074e-11, 7.04730575222699744e-11, 7.165137749353606893e-11, 7.283488854246465457e-11, 7.402359723198026549e-11, 7.521751085237838949e-11, 7.641663741249933447e-11, 7.762098563174413302e-11, 7.883056493289498597e-11, 8.004538543570588936e-11, 8.126545795123199036e-11, 8.249079397686890289e-11, 8.372140569207570087e-11, 8.4957305954757619354e-11, 8.619850829828664327e-11, 8.7445026929140171136e-11, 8.869687672513981589e-11, 8.995407323427416333e-11, 9.121663267409095956e-11, 9.248457193164575415e-11, 9.3757908563995494464e-11, 9.5036660799226957417e-11, 9.63208475380112258e-11, 9.761048835567667494e-11, 9.890560350479413796e-11, 1.00206213918269070814e-10, 1.0151234121293664765e-10, 1.02824007693656787585e-10, 1.0414123635790715135e-10, 1.0546405090087315449e-10, 1.06792475721035027953e-10, 1.0812653592625292082e-10, 1.0946625734035198741e-10, 1.108116665102103361e-10, 1.121627907133536434e-10, 1.1351965796606115782e-10, 1.14882297031988736866e-10, 1.1625073743131548073e-10, 1.1762500945042145123e-10, 1.190051441521048967e-10, 1.2039117338634834769e-10, 1.2178312980164390555e-10, 1.2318104685688902085e-10, 1.2458495883386505479e-10, 1.2599490085031193522e-10, 1.2741090887361326595e-10, 1.2883301973510732471e-10, 1.3026127114504049643e-10, 1.3169570170818083705e-10, 1.3313635094011065346e-10, 1.3458325928421822104e-10, 1.3603646812941004517e-10, 1.3749601982856641262e-10, 1.3896195771776437603e-10, 1.4043432613629377562e-10, 1.4191317044749343129e-10, 1.4339853706043624134e-10, 1.4489047345249360593e-10, 1.4638902819281136124e-10, 1.4789425096673127026e-10, 1.4940619260119407434e-10, 1.5092490509116217472e-10, 1.5245044162710219267e-10, 1.5398285662356995868e-10, 1.5552220574894291447e-10, 1.5706854595634748857e-10, 1.5862193551583173193e-10, 1.6018243404783639376e-10, 1.6175010255802068348e-10, 1.633250034735022221e-10, 1.6490720068057414645e-10, 1.6649675956396600785e-10, 1.680937470477190228e-10, 1.6969823163775040085e-10, 1.7131028346618591671e-10, 1.7292997433754463176e-10, 1.7455737777686472364e-10, 1.7619256907986478154e-10, 1.778356253652406935e-10, 1.7948662562920442105e-10, 1.811456508023775595e-10, 1.8281278380915965203e-10, 1.8448810962969880521e-10, 1.8617171536460028017e-10, 1.8786369030251745832e-10, 1.895641259907789504e-10, 1.912731163092156906e-10, 1.9299075754736269297e-10, 1.9471714848522181392e-10, 1.9645239047778443288e-10, 1.9819658754352651834e-10, 1.9994984645710317302e-10, 2.0171227684648555102e-10, 2.0348399129480011919e-10, 2.0526510544714871268e-10, 2.0705573812270784523e-10, 2.0885601143242742308e-10, 2.106660509026725399e-10, 2.1248598560517757923e-10, 2.1431594829370962104e-10, 2.1615607554786836048e-10, 2.1800650792448264967e-10, 2.1986739011709964322e-10, 2.2173887112410167059e-10, 2.2362110442602872215e-10, 2.2551424817273120383e-10, 2.274184653810288189e-10, 2.2933392414360756416e-10, 2.3126079784994842242e-10, 2.3319926542014901032e-10, 2.351495115525738931e-10, 2.371117269863512862e-10, 2.3908610877982431392e-10, 2.4107286060616488905e-10, 2.4307219306746875265e-10, 2.4508432402877256386e-10, 2.4710947897356962786e-10, 2.4914789138255157863e-10, 2.5119980313747101363e-10, 2.5326546495220691162e-10, 2.5534513683332318113e-10, 2.574390885726437922e-10, 2.5954760027462899082e-10, 2.6167096292162995395e-10, 2.6380947898042840066e-10, 2.6596346305383833025e-10, 2.6813324258156527171e-10, 2.7031915859499125955e-10, 2.7252156653108945872e-10, 2.7474083711128063217e-10, 2.7697735729173586528e-10, 2.7923153129241956254e-10, 2.8150378171306959777e-10, 2.8379455074534647685e-10, 2.8610430149157289287e-10, 2.8843351940185591054e-10, 2.907827138429683151e-10, 2.9315241981420201585e-10, 2.9554319982754142935e-10, 2.9795564597199498353e-10, 3.0039038218483704706e-10, 3.0284806675593473932e-10, 3.0532939509536738037e-10, 3.078351027993180442e-10, 3.1036596905488446798e-10, 3.1292282043121689062e-10, 3.1550653511248925108e-10, 3.181180476379574015e-10, 3.2075835422614610093e-10, 3.2342851877453593e-10, 3.2612967964363397503e-10, 3.288630573558377941e-10, 3.3162996336612062813e-10, 3.3443181009469351256e-10, 3.3727012245331027203e-10, 3.4014655114927385962e-10, 3.4306288811784330848e-10, 3.4602108451920840512e-10, 3.490232718467888257e-10, 3.5207178683807936512e-10, 3.5516920106992621288e-10, 3.5831835637456129404e-10, 3.6152240755638520526e-10, 3.64784874359773884e-10, 3.6810970529100708575e-10, 3.7150135681794897063e-10, 3.7496489279175744963e-10, 3.7850611086618685967e-10, 3.821317055752113647e-10, 3.858494821442068329e-10, 3.8966864204951325878e-10, 3.9360017259143401168e-10, 3.9765739164239119832e-10, 4.0185673180950819337e-10, 4.0621890904224453233e-10, 4.1077073917111376656e-10, 4.1554811384445929617e-10, 4.206012155727806916e-10, 4.260045170479017014e-10, 4.3187855851888905052e-10, 4.38447758501893526e-10, 4.4626260680383653544e-10, 4.656612875245796924e-10 };
#ifndef INFER_TIMINGS                           
        static uint_fast16_t i_max = __NORM_BINS__;
#else                                                   /* To estimate the effects of early exit alone */
        static uint_fast16_t i_max = 2*__NORM_BINS__ - 256;
#endif
        uint_fast8_t i = fast_prng.l & 0xff;                    /* Floating-point multiplication squashes these bits, so they can be used to sample i */
        if (i < i_max) return X[i] * fast_prng++.sl;              /* Early exit */
        uint32_t U_1 = random_int31();
        float sign_bit = fast_prng.l & 0x100 ? 1. : -1.;           /* Another squashed, recyclable bit */
        uint_fast8_t j = _norm_sample_A();
        int32_t U_diff;
        static int32_t max_iE = 528335327, min_iE = 177059254;

        static float X_0 = 3.6360066255009458;
        static uint_fast8_t j_inflection = 204;
        float x, *X_j = X + j;
            /* Four kinds of overhangs: 
             *  j = 0                :  Sample from tail
             *  0 < j < j_inflection :  Overhang is concave; only sample from Lower-Left triangle
             *  j = j_inflection     :  Must sample from entire overhang rectangle
             *  j > j_inflection     :  Overhangs are convex; implicitly accept point in Lower-Left triangle
             * 
             * Conditional statements are arranged such that the more likely outcomes are first. */
#ifndef SIMPLE_OVERHANGS
        if (j > j_inflection) {             /* Convex overhang */
            for (;;) {
                x = _FAST_PRNG_SAMPLE_X(X_j, U_1);
                U_diff = random_int31() - U_1;
                if (U_diff >= 0) break;      
                if (U_diff >= -max_iE &&
                    _FAST_PRNG_SAMPLE_Y(j, pow(2, 31) - (U_1 + U_diff)) < exp(-0.5*x*x) ) break;
                U_1 = random_int31();
                }
        } else if (j == 0) {                /* Tail */
#endif
#ifdef SIMPLE_OVERHANGS
        if (j == 0) {                       /* Tail (excluding Convex overhang conditional) */
#endif
            do x = pow(X_0, -1)*exponential();
            while (exponential() < 0.5*x*x);
            x += X_0;
#ifndef SIMPLE_OVERHANGS
        } else if (j < j_inflection) {  /* Concave overhang */ 
            for (;;) {
                U_diff = random_int31() - U_1;
                if (U_diff < 0) {
                    U_diff = -U_diff;
                    U_1 -= U_diff; 
                }
                x = _FAST_PRNG_SAMPLE_X(X_j, U_1);
                if (U_diff > min_iE) break;
                if ( _FAST_PRNG_SAMPLE_Y(j, pow(2, 31) - (U_1 + U_diff)) < exp(-0.5*x*x) ) break;
                U_1 = random_int31();
            } 
#endif
        } else {                        /* Inflection point or simple overhangs */                
            for (;;) {
                x = _FAST_PRNG_SAMPLE_X(X_j, U_1);
                if ( _FAST_PRNG_SAMPLE_Y(j, random_int31()) < exp(-0.5*x*x) ) break;
                U_1 = random_int31();
            }
        }
        return sign_bit*x; 
    }
}
}
