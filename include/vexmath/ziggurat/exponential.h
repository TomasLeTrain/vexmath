#pragma once
/* Text wrapping is not recommended for this document 
 * 
 * Exponential PRNG generator. Must call exponential_setup() once to initialize
 * the upstream uniform PRNG.
 *
 * exponential() -> Exponentially-distributed PRN with mean 1. 
 * */

#include "math/ziggurat/shared.h"

#define	__EXP_LAYERS__	252


namespace math {
namespace ziggurat {
    /* The precomputed ziggurat lengths, denoted X_i in the main text (from create_layers.py) */
    static float __exp_X__[253] = { 3.5247181997042058993e-09, 3.1771476136115790414e-09, 2.9692532016053211664e-09, 2.8195325933611451054e-09, 2.7020730176153874583e-09, 2.6052079402410985193e-09, 2.5226609010455242163e-09, 2.4506589708153619123e-09, 2.3867539446445213876e-09, 2.3292655158236323607e-09, 2.2769896990023990623e-09, 2.2290338791928492096e-09, 2.18471769194199377e-09, 2.1435105009729675215e-09, 2.104990354711727623e-09, 2.0688161264840786722e-09, 2.0347080578505158264e-09, 2.0024338333324186059e-09, 1.971798398986185967e-09, 1.9426363773215695785e-09, 1.9148063217740183961e-09, 1.8881862995747243934e-09, 1.8626704503628080046e-09, 1.8381662725643480761e-09, 1.8145924601551716316e-09, 1.7918771609339358329e-09, 1.7699565613416030728e-09, 1.7487737269394764039e-09, 1.7282776449978750397e-09, 1.7084224283008810905e-09, 1.689166648618455361e-09, 1.6704727752778866697e-09, 1.6523066995350526929e-09, 1.6346373294609225865e-09, 1.6174362431461293609e-09, 1.6006773904206983265e-09, 1.584336835157501352e-09, 1.5683925317017738347e-09, 1.5528241301377488569e-09, 1.5376128060364044432e-09, 1.5227411110777033714e-09, 1.5081928415462029594e-09, 1.4939529221908899407e-09, 1.4800073033419585985e-09, 1.4663428695071606419e-09, 1.4529473579424952791e-09, 1.4398092859175194286e-09, 1.4269178855832444493e-09, 1.4142630455074411721e-09, 1.4018352580737848607e-09, 1.3896255720521190037e-09, 1.3776255497408167895e-09, 1.3658272281617005758e-09, 1.3542230838556258133e-09, 1.3428060008845939781e-09, 1.3315692416957267056e-09, 1.3205064205449262123e-09, 1.3096114792146529076e-09, 1.2988786647918721814e-09, 1.2883025092996098791e-09, 1.2778778109993374017e-09, 1.2675996172021084218e-09, 1.2574632084444318091e-09, 1.2474640839006620703e-09, 1.2375979479175343806e-09, 1.2278606975686332121e-09, 1.2182484111372886421e-09, 1.2087573374458361869e-09, 1.1993838859575197958e-09, 1.1901246175847051011e-09, 1.1809762361436227781e-09, 1.1719355804016845836e-09, 1.1629996166685975954e-09, 1.1541654318871234134e-09, 1.1454302271834561869e-09, 1.1367913118408849984e-09, 1.1282460976637133815e-09, 1.1197920937013760461e-09, 1.1114269013053590635e-09, 1.1031482094939287749e-09, 1.0949537906018362816e-09, 1.0868414961941146792e-09, 1.0788092532248481541e-09, 1.0708550604233859073e-09, 1.0629769848919174292e-09, 1.0551731588996346788e-09, 1.047441776859895168e-09, 1.0397810924778801634e-09, 1.032189416057225154e-09, 1.0246651119549951445e-09, 1.0172065961751938772e-09, 1.0098123340917414911e-09, 1.0024808382925362871e-09, 9.95210666536839334e-10, 9.880004198187911406e-10, 9.808487405303924472e-10, 9.737543107177608065e-10, 9.667158504249149683e-10, 9.597321161197437535e-10, 9.528018991971882831e-10, 9.459240245550090395e-10, 9.390973492378248575e-10, 9.323207611454019529e-10, 9.2559317780143960554e-10, 9.189135451793470555e-10, 9.122808365817352835e-10, 9.0569405157055920887e-10, 8.991522149450418839e-10, 8.9265437576469379077e-10, 8.8619960641490853643e-10, 8.7978700171277216933e-10, 8.734156780508679846e-10, 8.6708477257699293215e-10, 8.6079344240782640823e-10, 8.545408638747080343e-10, 8.483262317997886842e-10, 8.4214875880091912813e-10, 8.360076746237337872e-10, 8.2990222549947374385e-10, 8.238316735271738156e-10, 8.1779529607891359013e-10, 8.117923852269022461e-10, 8.058222471912321021e-10, 7.9988420180719648205e-10, 7.9397758201112395594e-10, 7.8810173334373360313e-10, 7.8225601347006488703e-10, 7.764397917150812798e-10, 7.7065244861408912905e-10, 7.6489337547715262705e-10, 7.5916197396672229417e-10, 7.534576556877282907e-10, 7.477798417894212749e-10, 7.4212796257827256226e-10, 7.365014571412721366e-10, 7.308997729789877275e-10, 7.253223656477708011e-10, 7.1976869841051600535e-10, 7.1423824189539943526e-10, 7.0873047376203812546e-10, 7.032448783745284794e-10, 6.977809464808349724e-10, 6.9233817489801245587e-10, 6.8691606620275578186e-10, 6.8151412842677928073e-10, 6.7613187475653589226e-10, 6.707688232367914647e-10, 6.6542449647757391783e-10, 6.6009842136401959514e-10, 6.547901287686402004e-10, 6.49499153265533199e-10, 6.4422503284605643274e-10, 6.3896730863548390544e-10, 6.3372552461015419444e-10, 6.2849922731461566657e-10, 6.232879655782635518e-10, 6.180912902309528638e-10, 6.1290875381705806177e-10, 6.0773991030743509315e-10, 6.025843148087239273e-10, 5.974415232694097245e-10, 5.923110921820382225e-10, 5.871925782809555723e-10, 5.8208553823491450897e-10, 5.7698952833385715515e-10, 5.719041041691496712e-10, 5.6682882030650507626e-10, 5.6176322995078754467e-10, 5.5670688460184395125e-10, 5.516593337004559862e-10, 5.4662012426344831133e-10, 5.4158880050692446203e-10, 5.365649034565319274e-10, 5.3154797054358040174e-10, 5.265375351857518516e-10, 5.215331263510469602e-10, 5.1653426810350874066e-10, 5.115404791291496155e-10, 5.065512722403818329e-10, 5.015661538571113951e-10, 4.9658462346250118623e-10, 4.9160617303123797895e-10, 4.866302864279485177e-10, 4.816564387731996983e-10, 4.7668409577428445624e-10, 4.7171271301773545863e-10, 4.6674173522021976607e-10, 4.61770595434145532e-10, 4.567987142039522006e-10, 4.5182549866865360311e-10, 4.4685034160575310734e-10, 4.418726204111449692e-10, 4.368916960090486401e-10, 4.3190691168538418332e-10, 4.2691759183727689953e-10, 4.2192304063056582674e-10, 4.169225405562700571e-10, 4.1191535087592252284e-10, 4.069007059444939623e-10, 4.0187781339827773813e-10, 3.9684585219356257252e-10, 3.9180397048015378285e-10, 3.8675128329177709798e-10, 3.8168687003306841335e-10, 3.7660977174016511695e-10, 3.715189880888066667e-10, 3.664134741202478965e-10, 3.6129213665109635376e-10, 3.5615383032829370822e-10, 3.5099735328473581356e-10, 3.458214423443013418e-10, 3.4062476771713269885e-10, 3.3540592711663586158e-10, 3.301634392185292783e-10, 3.2489573636899218368e-10, 3.1960115643305963726e-10, 3.1427793365528188285e-10, 3.0892418838154630975e-10, 3.0353791546288091368e-10, 2.9811697112777648223e-10, 2.926590580674800361e-10, 2.8716170842674708993e-10, 2.8162226432797930917e-10, 2.7603785547593854e-10, 2.7040537328856281917e-10, 2.6472144087043983348e-10, 2.5898237798059042533e-10, 2.53184159933583295e-10, 2.4732236909633967064e-10, 2.4139213727949975812e-10, 2.3538807683964101081e-10, 2.2930419766065523796e-10, 2.2313380630178354998e-10, 2.168693823864373233e-10, 2.105024256098930435e-10, 2.0402326433502031081e-10, 1.9742081326289335985e-10, 1.906822625318697377e-10, 1.8379267286522496621e-10, 1.7673443944846348836e-10, 1.6948656826996752139e-10, 1.6202367762659987536e-10, 1.5431458479472378153e-10, 1.4632024450188145334e-10, 1.3799063195602280775e-10, 1.2925981931809252624e-10, 1.200377623409466806e-10, 1.1019560251187605665e-10, 9.9536768029763321267e-11, 8.7731988011551942837e-11, 7.413873907385358631e-11, 5.7045280024963312958e-11, 0.0 };

    inline float NormalPRNG::_exp_overhang(uint_fast8_t j) {    /* Draws a PRN from overhang i */
        float *X_j = __exp_X__ + j;
        static float  Y[253] = { 2.403122462709910227e-13, 5.069139441002927404e-13, 7.9218195276496790927e-13, 1.0925980394729492437e-12, 1.4060732647985321176e-12, 1.7312039136651913857e-12, 2.066973555828395308e-12, 2.4126083251416236672e-12, 2.7674974204100162072e-12, 3.1311455070231256248e-12, 3.503142336176224398e-12, 3.8831423693519779095e-12, 4.27085056211634114e-12, 4.6660121195981831382e-12, 5.068404912585189471e-12, 5.4778337338321896916e-12, 5.8941258622164329746e-12, 6.317127578399754974e-12, 6.746701386999391326e-12, 7.182723772831070679e-12, 7.625083367329592694e-12, 8.073679434483526717e-12, 8.528420608843262497e-12, 8.989223834691543013e-12, 9.4560134674285426684e-12, 9.928720507012485577e-12, 1.0407281939842860664e-11, 1.089164017041026005e-11, 1.13817425278033065214e-11, 1.1877540835067149646e-11, 1.2378991031669087692e-11, 1.28860528411033992036e-11, 1.3398689477075104862e-11, 1.3916867382826528787e-11, 1.4440555999074900415e-11, 1.4969727556761824232e-11, 1.5504356891412720235e-11, 1.6044421276394261689e-11, 1.6589900272762010133e-11, 1.714077559372568513e-11, 1.7697030982038990035e-11, 1.8258652098855047196e-11, 1.8825626422785538194e-11, 1.9397943158068196876e-11, 1.9975593150888668597e-11, 2.0558568813023211738e-11, 2.1146864052071756235e-11, 2.174047420763928661e-11, 2.2339395992899710828e-11, 2.2943627441042227238e-11, 2.3553167856157294369e-11, 2.4168017768168958219e-11, 2.4788178891463595621e-11, 2.5413654086903007963e-11, 2.604444732694301772e-11, 2.6680563663607930302e-11, 2.7322009199096974544e-11, 2.7968791058821592641e-11, 2.8620917366692610654e-11, 2.9278397222494221753e-11, 2.994124068119764582e-11, 3.0609458734081539005e-11, 3.1283063291538929005e-11, 3.1962067167461830596e-11, 3.264648406510491081e-11, 3.3336328564338762217e-11, 3.4031616110211626206e-11, 3.4732363002745890862e-11, 3.5438586387902460958e-11, 3.6150304249652241213e-11, 3.686753540309955793e-11, 3.7590299488607430345e-11, 3.831861696687924598e-11, 3.905250911495564105e-11, 3.9791998023089281068e-11, 4.0537106592463814777e-11, 4.1287858533726570266e-11, 4.2044278366307605007e-11, 4.280639141850053831e-11, 4.3574223828283208517e-11, 4.4347802544858629944e-11, 4.512715533089899422e-11, 4.5912310765477585566e-11, 4.6703298247675473567e-11, 4.7500148000851725842e-11, 4.830289107756765736e-11, 4.9111559365157316462e-11, 4.9926185591938008422e-11, 5.0746803334056186923e-11, 5.1573447022965509547e-11, 5.2406151953535264172e-11, 5.3244954292788736064e-11, 5.4089891089272407673e-11, 5.494100028305817077e-11, 5.5798320716381989904e-11, 5.666189214492369296e-11, 5.7531755249733783713e-11, 5.8407951649814378524e-11, 5.929052391536256898e-11, 6.017951558168570937e-11, 6.107497116379932667e-11, 6.1976936171719556186e-11, 6.2885457126463221406e-11, 6.3800581576769907566e-11, 6.472235811656162795e-11, 6.565083640315695512e-11, 6.658606717625778971e-11, 6.7528102277728271794e-11, 6.8476994672186708326e-11, 6.9432798468432799285e-11, 7.039556894173389918e-11, 7.136536255699555446e-11, 7.2342236992843116086e-11, 7.3326251166642844315e-11, 7.431746526049260596e-11, 7.531594074821401753e-11, 7.632174042337971675e-11, 7.733492842841135675e-11, 7.8355570284785916335e-11, 7.93837329243900152e-11, 8.041948472206411965e-11, 8.1462895529380831523e-11, 8.251403670970387777e-11, 8.357298117457696882e-11, 8.4639803421494381107e-11, 8.5714579573107950216e-11, 8.679738741792814887e-11, 8.788830645258007782e-11, 8.898741792567853067e-11, 9.009480488338981775e-11, 9.121055221675176346e-11, 9.233474671082724125e-11, 9.346747709577079549e-11, 9.460883409989233781e-11, 9.575891050480661552e-11, 9.691780120276215062e-11, 9.808560325624866234e-11, 9.926241595998763598e-11, 1.0044834090541671266e-10, 1.01643482047784973896e-10, 1.0284794577598301315e-10, 1.0406184098523895344e-10, 1.05285279152819322233e-10, 1.0651837441688196835e-10, 1.0776124365863704229e-10, 1.0901400658798150494e-10, 1.10276785832782728946e-10, 1.115497070319975641e-10, 1.1283289893282481097e-10, 1.1412649349210144756e-10, 1.1543062598216625103e-10, 1.167454351014287241e-10, 1.1807106308989655663e-10, 1.1940765584993131509e-10, 1.2075536307251975502e-10, 1.2211433836936720074e-10, 1.2348473941113995118e-10, 1.2486672807220577915e-10, 1.2626047058224543721e-10, 1.2766613768513382176e-10, 1.2908390480551725215e-10, 1.3051395222354338283e-10, 1.3195646525823279468e-10, 1.3341163446001653817e-10, 1.3487965581300208458e-10, 1.3636073094757156457e-10, 1.3785506736396115384e-10, 1.393628786675193528e-10, 1.4088438481639509037e-10, 1.4241981238246449615e-10, 1.4396939482636831109e-10, 1.455333727876007859e-10, 1.4711199439066614719e-10, 1.487055155684009702e-10, 1.5031420040365083526e-10, 1.5193832149058830906e-10, 1.5357816031706753037e-10, 1.5523400766952956142e-10, 1.5690616406210339199e-10, 1.5859494019169141062e-10, 1.6030065742098681916e-10, 1.6202364829154559568e-10, 1.6376425706922917433e-10, 1.6552284032454823892e-10, 1.6729976755067545868e-10, 1.6909542182215852234e-10, 1.7091020049765774914e-10, 1.727445159703586503e-10, 1.7459879647007340358e-10, 1.7647348692145125547e-10, 1.7836904986317209015e-10, 1.8028596643350638839e-10, 1.8222473742819615242e-10, 1.8418588443725390307e-10, 1.8616995106800079139e-10, 1.8817750426248210439e-10, 1.902091357183228596e-10, 1.9226546342313399978e-10, 1.9434713331376993908e-10, 1.9645482107309323403e-10, 1.9858923407844831778e-10, 2.0075111351781470973e-10, 2.0294123669163785504e-10, 2.051604195206667299e-10, 2.0740951928281404831e-10, 2.0968943760516017103e-10, 2.1200112374082118074e-10, 2.1434557816458615168e-10, 2.1672385652610872024e-10, 2.1913707400514774822e-10, 2.2158641012005484971e-10, 2.2407311404860348794e-10, 2.2659851052959235684e-10, 2.2916400642474059365e-10, 2.3177109803360419788e-10, 2.344213792700570204e-10, 2.371165508278929444e-10, 2.398584304860730516e-10, 2.42648964732022116e-10, 2.454902419154002902e-10, 2.4838450718651947805e-10, 2.5133417952509045897e-10, 2.5434187122895624634e-10, 2.574104103124190027e-10, 2.6054286636438972627e-10, 2.637425805441630101e-10, 2.6701320055563978553e-10, 2.703587216508985084e-10, 2.7378353498718519044e-10, 2.772924850200622371e-10, 2.8089093809132890767e-10, 2.8458486500886696335e-10, 2.8838094128292813306e-10, 2.9228666987735849823e-10, 2.963105330019236196e-10, 3.0046218183865762342e-10, 3.0475267651368066005e-10, 3.0919479366079386962e-10, 3.138034265014745745e-10, 3.1859611405397709423e-10, 3.235937546144606873e-10, 3.2882158896837058463e-10, 3.3431059021326213302e-10, 3.4009948805803213478e-10, 3.4623782466854282548e-10, 3.527907732376470208e-10, 3.598471605904644567e-10, 3.6753379171489498356e-10, 3.7604354107494937915e-10, 3.8569831999015679232e-10, 3.971232910461034838e-10, 4.119717228124563739e-10, 4.656612875245796924e-10 };
#ifdef SIMPLE_OVERHANGS
        float x = _FAST_PRNG_SAMPLE_X(X_j, random_int31());   
                                                /* if y < f(x) return x, otherwise try again */
        return _FAST_PRNG_SAMPLE_Y(j, random_int31()) <= exp(-x) ? x : _exp_overhang(j);    
#else
        int32_t U_x = random_int31();               /* To sample a unit right-triangle: */
        int32_t U_distance = random_int31() - U_x;  /* U_x <- min(U_1, U_2)             */
        if (U_distance < 0) {                       /* distance <- | U_1 - U_2 |        */
            U_distance = -U_distance;               /* U_y <- 1 - (U_x + distance)      */
            U_x -= U_distance;
        }
        static int32_t iE_max = 198829404;
        float x = _FAST_PRNG_SAMPLE_X(X_j, U_x);   
        if (U_distance >= iE_max) return x;     /* Early Exit: x < y - epsilon */ 
        return _FAST_PRNG_SAMPLE_Y(j, pow(2, 31) - (U_x + U_distance)) <= exp(-x) ? x : _exp_overhang(j); 
#endif
    }


    uint_fast8_t NormalPRNG::_exp_sample_A(void) {
        /* Alias Sampling, see http://scorevoting.net/WarrenSmithPages/homepage/sampling.abs */
        static uint8_t map[256] = { 0, 0, 1, 235, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 250, 250, 250, 250, 250, 250, 250, 249, 249, 249, 249, 249, 249, 248, 248, 248, 248, 247, 247, 247, 247, 246, 246, 246, 245, 245, 244, 244, 243, 243, 242, 241, 241, 240, 239, 237, 3, 3, 4, 4, 6, 0, 0, 0, 0, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 2, 0, 0, 0 };
        static int32_t ipmf[256] = { 2147483647, 378069680, 620328575, 1720146125, 1516906657, 2058341252, 1420184875, 1786539874, 1448284105, 1174858687, 948856081, 758658552, 596201254, 455701939, 332901472, 224589908, 128299911, 42102213, -35534551, -105842161, -169823207, -228302438, -281964824, -331384197, -377045095, -419359614, -458680569, -495311870, -529516778, -561524535, -591535733, -619726687, -646253030, -671252681, -694848314, -717149427, -738254071, -758250324, -777217532, -795227372, -812344765, -828628653, -844132680, -858905775, -872992657, -886434287, -899268248, -911529093, -923248639, -934456235, -945178997, -955442013, -965268532, -974680124, -983696830, -992337293, -1000618879, -1008557779, -1016169105, -1023466980, -1030464615, -1037174375, -1043607849, -1049775907, -1055688748, -1061355956, -1066786537, -1071988964, -1076971211, -1081740788, -1086304771, -1090669831, -1094842259, -1098827993, -1102632636, -1106261478, -1109719517, -1113011471, -1116141799, -1119114717, -1121934203, -1124604021, -1127127724, -1129508670, -1131750030, -1133854797, -1135825798, -1137665696, -1139377006, -1140962094, -1142423188, -1143762382, -1144981645, -1146082823, -1147067643, -1147937721, -1148694565, -1149339578, -1149874062, -1150299222, -1150616167, -1150825917, -1150929401, -1150927464, -1150820864, -1150610278, -1150296304, -1149879461, -1149360189, -1148738855, -1148015749, -1147191090, -1146265023, -1145237621, -1144108887, -1142878753, -1141547080, -1140113660, -1138578215, -1136940397, -1135199788, -1133355898, -1131408169, -1129355971, -1127198601, -1124935285, -1122565174, -1120087345, -1117500801, -1114804466, -1111997186, -1109077727, -1106044774, -1102896928, -1099632705, -1096250532, -1092748747, -1089125594, -1085379223, -1081507686, -1077508930, -1073380802, -1069121036, -1064727258, -1060196974, -1055527571, -1050716311, -1045760326, -1040656611, -1035402022, -1029993265, -1024426898, -1018699313, -1012806740, -1006745231, -1000510657, -994098698, -987504832, -980724328, -973752234, -966583366, -959212296, -951633341, -943840548, -935827679, -927588197, -919115248, -910401646, -901439851, -892221951, -882739637, -872984186, -862946427, -852616724, -841984937, -831040399, -819771877, -808167539, -796214913, -783900843, -771211447, -758132065, -744647204, -730740483, -716394566, -701591092, -686310606, -670532469, -654234773, -637394242, -619986124, -601984075, -583360024, -564084041, -544124172, -523446268, -502013796, -479787631, -456725813, -432783296, -407911656, -382058768, -355168444, -327180036, -298027977, -267641280, -235942957, -202849378, -168269533, -132104203, -94245008, -54573324, -12959042, 30740859, 76683967, 125044328, 176014673, 229808995, 286665574, 346850537, 410662054, 478435335, 550548583, 627430136, 709567098, 797515806, 891914635, 993499759, 1103124709, 1221784819, 1350648094, 1491094511, 1644766632, 1813635474, 2000087361, 1779702448, 2070318567, 1270646295, 2114964751, 1857106493, 1904236001, 656882260, 1472185757, 1003384532, 1090851318, 1956905696, 1706770382, 456568272, 1104294945, -175042036, 1635275921, 894795377, 914379824, -2147483647, -2147483647, -2147483647 };
        uint_fast8_t j = fast_prng.sl & 0xff;           /* j <- I(0, 256) */
        return fast_prng++.sl >= ipmf[j] ? map[j] : j;
    }

    inline float NormalPRNG::exponential(void) {
#ifndef INFER_TIMINGS
        static uint_fast8_t i_max = __EXP_LAYERS__;
#else
        static uint_fast8_t i_max = 2*__EXP_LAYERS__ - 256;
#endif
        uint_fast8_t i = fast_prng.sl & 0xff;                           /* Float multiplication squashes these last 8 bits, so they can be used to sample i */
        if (i < i_max) return __exp_X__[i]*random_int31();          /* Early Exit - generates new random number */
        fast_prng++;
        uint_fast8_t j = _exp_sample_A();                           /* from shared.h */ 
        static float X_0 = 7.569274694148063;
        return j > 0 ? _exp_overhang(j) : X_0 + exponential();      /* sample from tail if j == 0; otherwise sample the overhang j */
    }
}
}
